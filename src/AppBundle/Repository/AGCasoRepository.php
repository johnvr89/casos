<?php

namespace AppBundle\Repository;

use AppBundle\Libs\Normalizer\ResultDecorator;

/**
 * AGCasoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AGCasoRepository extends \AppBundle\Libs\Repository\BaseRepository {

    public function getBaseQuery($baseEntity, $start = 0, $limit = 30, $filters = array(), $columnsAlias = array(), $decorator = ResultDecorator::DEFAULT_DECORATOR) {
        
    }

    public function findAll() {
        return $this->findBy(array('visible' => 1), array('id' => 'DESC'), null, null);
    }


    public function getAllCompanyWithCase($all = true, $case = array())
    {

        $qb = $this->createQueryBuilder('entity');
        $qb->innerJoin('entity.estado','estado');

        $qb->andWhere($qb->expr()->notIn('estado.id',array(5,6)));
        $qb->andWhere($qb->expr()->eq('entity.visible','?1'));
        $qb->setParameter(1,1);
        if(!$all&&count($case)==0){
            return array();
        }
        if(count($case)>0){
            $qb->andWhere($qb->expr()->in('entity.id',$case));
        }
        $clients=array();
        $result=$qb->getQuery()->getResult();
        foreach ($result as $value){
            $client=$value->getEmpresa();
            if($client->getVisible()==1){
                $clients[$client->getId()]=$client;
            }
        }
        return $clients;
    }

    public function getTotal($intEmpresa) {
        $qb = $this->createQueryBuilder('entity');
        $qb->select('COUNT(entity.id)');
        $qb->andWhere($qb->expr()->eq('entity.visible', '?1'));
        $qb->andWhere($qb->expr()->eq('entity.empresaRectora', '?2'));
        $qb->setParameter(1, 1);
        $qb->setParameter(2, $intEmpresa);
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getCaseForReportConnsolidated($all = true, $myCase = false, $intermediary = false, $initialDate, $endDate, $company = null, $client = null, $lawer = null, $intermediary = null, $state = null, $caseType = null, $caseName = null) {
        $qb = $this->createQueryBuilder('entity');
        
        $qb->innerJoin('entity.estado', 'estado');
      
        $qb->innerJoin('entity.tipocaso', 'tipocaso');
        $qb->innerJoin('entity.empresa', 'empresa');

        $qb->innerJoin('entity.empresaRectora', 'empresaRectora');

        if (!$all) {
            if ($myCase && $intermediary) {
                $qb->andWhere($qb->expr()->eq('entity.responsable', '?3'));

                $qb->orWhere($qb->expr()->eq('entity.intermediario', '?5'));
                $qb->setParameter(3, $lawer);
            }
            if ($myCase) {
                $qb->andWhere($qb->expr()->eq('entity.responsable', '?3'));
                $qb->setParameter(3, $lawer);
            }
            if ($intermediary) {
                $qb->andWhere($qb->expr()->eq('entity.intermediario', '?5'));
                $qb->setParameter(5, $intermediary);
            }
        }

        if ($client) {
            $qb->andWhere($qb->expr()->eq('empresa.id', '?1'));
            $qb->setParameter(1, $client);
        }
        if ($company) {
            $qb->andWhere($qb->expr()->eq('empresaRectora.id', '?2'));
            $qb->setParameter(2, $company);
        }
        if ($all) {
            if ($lawer) {
                $qb->andWhere($qb->expr()->eq('entity.responsable', '?3'));
                $qb->setParameter(3, $lawer);
            }
            if ($intermediary) {
                $qb->innerJoin('entity.intermediario', 'intermediario');
                $qb->andWhere($qb->expr()->eq('intermediario.id', '?5'));
                $qb->setParameter(5, $intermediary);
            }
        }
        if ($state) {
            $qb->andWhere($qb->expr()->eq('estado.id', '?4'));
            $qb->setParameter(4, $state);
        }

        if ($initialDate && $endDate) {
            $initial = \DateTime::createFromFormat('d/m/Y', $initialDate)->format('Y-m-d');
            $end = \DateTime::createFromFormat('d/m/Y', $endDate)->format('Y-m-d');
            $qb->andWhere($qb->expr()->between('entity.fechaCrea', '?6', '?7'));
            $qb->setParameter(6, $initial);
            $qb->setParameter(7, $end);
        }
        if ($caseType) {
            $qb->andWhere($qb->expr()->eq('tipocaso.id', '?8'));
            $qb->setParameter(8, $caseType);
        }
        if ($caseName) {
            $qb->andWhere($qb->expr()->like('entity.nombre', "'%{$caseName}%'"));
        }
        $qb->andWhere($qb->expr()->eq('entity.visible', '?10'));
        $qb->setParameter(10, 1);
        return $qb->getQuery()->getResult();
    }

    public function getLastTenCase() {
        return $this->findBy(array('visible' => 1), array('id' => 'DESC'), 10, 0);
    }

    public function PendingCaseByPayment() {
        return array();
    }

        public function getPermissionCase($all = false, $myCase = false, $intermediary = false, $idUser = -1, $idCompany = -1, $limit = false) {
        $qb = $this->createQueryBuilder('entity');
        $qb->orderBy('entity.id', 'DESC');
        $qb->setParameter(2, $idCompany);
        if ($limit) {
            $qb->setFirstResult(0);
            $qb->setMaxResults(10);
        }
        if ($all) {
            $qb->where($qb->expr()->eq('entity.empresaRectora', '?2'));
            $qb->andWhere($qb->expr()->eq('entity.visible', '?10'));
            $qb->setParameter(10, 1);
            return $qb->getQuery()->getResult();
        }
        $qb->setParameter(1, $idUser);
        if ($myCase && $intermediary) {
            $qb->where($qb->expr()->eq('entity.responsable', '?1'));
            $qb->andWhere($qb->expr()->eq('entity.empresaRectora', '?2'));
            $qb->orWhere($qb->expr()->eq('entity.intermediario', '?1'));
            $qb->andWhere($qb->expr()->eq('entity.visible', '?10'));
            $qb->setParameter(10, 1);
            return $qb->getQuery()->getResult();
        }
        if ($myCase) {
            $qb->where($qb->expr()->eq('entity.responsable', '?1'));
            $qb->andWhere($qb->expr()->eq('entity.empresaRectora', '?2'));
            $qb->andWhere($qb->expr()->eq('entity.visible', '?10'));
            $qb->setParameter(10, 1);
            return $qb->getQuery()->getResult();
        }
        if ($intermediary) {
            $qb->where($qb->expr()->eq('entity.intermediario', '?1'));
            $qb->andWhere($qb->expr()->eq('entity.empresaRectora', '?2'));
            $qb->andWhere($qb->expr()->eq('entity.visible', '?10'));
            $qb->setParameter(10, 1);
            return $qb->getQuery()->getResult();
        }
    }

    public function getIdOfCaseWithPermision($all = false, $myCase = false, $intermediary = false, $idUser = -1,$idCompany=-1) {
        $result = $this->getPermissionCase($all, $myCase, $intermediary, $idUser,$idCompany);
        $ids = array();
        foreach ($result as $value) {
            $ids[] = $value->getId();
        }
        return $ids;
    }

}
