<?php

namespace AppBundle\Repository;

use AppBundle\Libs\Normalizer\ResultDecorator;
use AppBundle\Libs\TraitMyCase\GetMyResorces;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMappingBuilder;
use Doctrine\ORM\Query\Parameter;

/**
 * AGPagoRealizadoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AGPagoRealizadoRepository extends \AppBundle\Libs\Repository\BaseRepository {

    use GetMyResorces;

    public function getBaseQuery($baseEntity, $start = 0, $limit = 30, $filters = array(), $columnsAlias = array(), $decorator = ResultDecorator::DEFAULT_DECORATOR) {
        
    }

    public function findAllGroupBy() {
        $qb = $this->createQueryBuilder('payment');
        $qb->innerJoin('payment.caso', 'caso');
        $qb->groupBy('caso');
        $qb->orderBy('payment.fechaProximoCobro', 'DESC');
        $qb->andWhere($qb->expr()->eq('payment.visible', '?10'));
        $qb->setParameter(10, 1);
        return $qb->getQuery()->getResult();
    }

    public function getPaymentOutDate($all = true, $cases = array(), $intEmpresa) {

        $qb1 = $this->createQueryBuilder('payment');
        $qb1->select('MAX(payment.id) AS id');
        $qb1->innerJoin('payment.caso', 'caso');
        $qb1->innerJoin('payment.tipoCobro', 'tipoCobro');
        $qb1->groupBy('caso.id');
        $qb1->andWhere($qb1->expr()->eq('payment.visible', '?10'));
        $qb1->andWhere($qb1->expr()->eq('caso.visible', '?10'));
        $qb1->setParameter(10, 1);

        $result = $qb1->getQuery()->getResult();
        $ids = array();
        foreach ($result as $value) {
            $value=$this->find($value['id']);
            if($value->estaAtrazado())
            $ids[] = $value->getId();
        }
       
        if (count($ids) == 0) {
            return array();
        }
        $qb = $this->createQueryBuilder('payment');
        $qb->groupBy('caso.id');

        $qb->innerJoin('payment.caso', 'caso');
        $qb->innerJoin('caso.estado', 'estado');
        $qb->where($qb->expr()->in('payment.id', $ids));
        $qb->andWhere($qb->expr()->in('estado.id', array(2, 3, 4)));
        $qb->andWhere($qb->expr()->eq('payment.visible', '?10'));
        
        if($intEmpresa > 0)
        {
            $qb->andWhere($qb->expr()->eq('caso.empresaRectora', '?1'));
            $qb->setParameter(1, $intEmpresa);
        }           
        
        $qb->setParameter(10, 1);
        if (!$all) {
            if (count($cases) == 0) {
                return array();
            } else {
                $qb->andWhere($qb->expr()->in('caso.id', $cases));
            }
        }
        return $qb->getQuery()->getResult();
    }

    public function getCaseWithPaymentOutDate($all = true, $cases = array(), $intEmpresa) {

        $qb1 = $this->createQueryBuilder('payment');
        $qb1->select('MAX(payment.id) AS id');
        $qb1->innerJoin('payment.caso', 'caso');
        $qb1->innerJoin('payment.tipoCobro', 'tipoCobro');

        $qb1->groupBy('caso.id');

        $qb1->andWhere($qb1->expr()->eq('payment.visible', '?10'));
        $qb1->setParameter(10, 1);

        $result = $qb1->getQuery()->getResult();
        $ids = array();
        foreach ($result as $value) {
            $value=$this->find($value['id']);
            if($value->estaAtrazado())
                $ids[] = $value->getId();
        }
        if (count($ids) == 0) {
            return array();
        }
        $qb = $this->createQueryBuilder('payment');
        $qb->groupBy('caso.id');
        $qb = $this->createQueryBuilder('payment');
        $qb->innerJoin('payment.caso', 'caso');
        $qb->innerJoin('caso.estado', 'estado');
        $qb->where($qb->expr()->in('payment.id', $ids));
        $qb->andWhere($qb->expr()->in('estado.id', array(2, 3, 4)));
        $qb->andWhere($qb->expr()->eq('payment.visible', '?10'));
        $qb->setParameter(10, 1);
        if($intEmpresa > 0)
        {
            $qb->andWhere($qb->expr()->eq('caso.empresaRectora', '?1'));
            $qb->setParameter(1, $intEmpresa);
        }                
        
        $qb->setFirstResult(0);
        $qb->setMaxResults(10);

        if (!$all) {
            if (count($cases) == 0) {
                return array();
            } else {
                $qb->andWhere($qb->expr()->in('caso.id', $cases));
            }
        }
        $result = $qb->getQuery()->getResult();
        $cases = array();
        foreach ($result as $value) {
            $obj = array();
            $case = $value->getCaso();
            $obj['nombre_caso'] = $case->getNombre();
            $obj['honorario'] = $case->getHonorarios();
            $obj['fecha_proximo_pago'] = $case->getProximoPago();
            $obj['dinero_pago'] = $case->getDineroPagado();
            $obj['monto'] = '$' . ( $obj['honorario'] - $obj['dinero_pago']);
            $cases[] = $obj;
        }
        return $cases;
    }

    public function getClientPaymentOutDate($initialDate, $endDate, $intEmpresa, $filterById = array()) 
    {

        $initial = \DateTime::createFromFormat('Y-m-d', $initialDate);
        $end = \DateTime::createFromFormat('Y-m-d', $endDate);

        $qb1 = $this->createQueryBuilder('payment');
        $qb1->select('MAX(payment.id) AS id');
        $qb1->innerJoin('payment.caso', 'caso');
        $qb1->innerJoin('payment.tipoCobro', 'tipoCobro');
        $qb1->groupBy('caso');
        $qb1->andWhere($qb1->expr()->eq('payment.visible', '?10'));
        $qb1->andWhere($qb1->expr()->eq('caso.visible', '?10'));
        $qb1->setParameter(10, 1);

        $result = $qb1->getQuery()->getResult();
        $ids = array();
        foreach ($result as $value) {
            $payment=$this->find($value['id']);
            if($payment&&$payment->estaEnRango($initial,$end)){
              $ids[] = $value['id'];    
            }
          
        }

        if (count($ids) == 0) {
            return array();
        }
     
        $qb = $this->createQueryBuilder('payment');
        $qb->innerJoin('payment.caso', 'caso');
        $qb->innerJoin('caso.estado', 'estado');
        $qb->where($qb->expr()->in('payment.id', $ids));
        $qb->andWhere($qb->expr()->in('estado.id', array(2, 3, 4)));
        $qb->andWhere($qb->expr()->eq('payment.visible', '?10'));
        $qb->setParameter(10, 1);
        
        if($intEmpresa > 0)
        {
            $qb->andWhere($qb->expr()->eq('caso.empresaRectora', '?1'));
            $qb->setParameter(1, $intEmpresa);
        }
        
        if (count($filterById) > 0) {
            $qb->andWhere($qb->expr()->in('caso.id', $filterById));
        }
        $result = $qb->getQuery()->getResult();
        $client = array();

        foreach ($result as $value) {


            $clientObj = array();
            $company = $value->getCaso()->getEmpresa();
            $case = $value->getCaso();
            $clientObj['nombre'] = $company->getNombre();
            $clientObj['nombre_caso'] = $case->getNombre();
            $clientObj['honorario'] = $case->getHonorarios();
            $clientObj['fecha_proximo_pago'] = $case->getProximoPago();
            $clientObj['dinero_pago'] = $case->getDineroPagado();
            $clientObj['por_pagar'] = $clientObj['honorario'] - $clientObj['dinero_pago'];
            $client[] = $clientObj;
        }
        return $client;
    }
    
    
    public function findPayByParams($arrayParams) {
        
        $intEmpresa = $arrayParams['intEmpresa'];
        
        $qb = $this->_em->createQuery();
        
        $sql = "  SELECT s
                    FROM AppBundle:AGPagoRealizado s,
                         AppBundle:AGCaso c
                    WHERE s.caso = c.id 
                    AND c.empresa = :empresa
                    ORDER BY s.fechaProximoCobro DESC";
        
        $qb->setDQL($sql);
        
        $qb->setParameter('empresa', $intEmpresa);
       
        return $qb->getResult();
    }         

}
